{
  "name": "thrift-dev",
  "description": "node.js bindings for the Apache Thrift RPC system",
  "homepage": "http://thrift.apache.org/",
  "repository": {
    "type": "svn",
    "url": "http://svn.apache.org/repos/asf/thrift/trunk/"
  },
  "version": "0.8.0-dev02",
  "author": {
    "name": "Apache Thrift Developers",
    "email": "dev@thrift.apache.org",
    "url": "http://thrift.apache.org"
  },
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "bugs": {
    "mail": "dev@thrift.apache.org",
    "url": "https://issues.apache.org/jira/browse/THRIFT"
  },
  "directories": {
    "lib": "./lib/thrift"
  },
  "main": "./lib/thrift",
  "engines": {
    "node": ">= 0.2.4"
  },
  "dependencies": {
    "node-int64": "0.3.x"
  },
  "readme": "# node-thrift\n\nThrift protocol implementation for nodejs. As of version 0.0.1, the basic\nprotocol has been implemented. A Thrift compiler that will generate the .js\nfiles from a Thrift specification is being implemented as well, see the\nThrift Compiler section below.\n\nNOTE: By default, node-thrift uses TFramedTransport. Using a popular\nexample, this is enabled by default in Cassandra 0.7 (but configuration must be\nchanged in Cassandra 0.6.x and earlier). See the\n[examples](https://github.com/wadey/node-thrift/tree/master/examples) folder\nto see how to enable TBufferedTransport (added in 0.7.0).\n\n## Install\n\n    npm install thrift \n\n## Thrift Compiler\n\nA Thrift compiler is included in the 0.6.0 release of Thrift. You can\ncompile nodejs sources by running the following:\n\n    thrift --gen js:node thrift_file\n\n## Cassandra Client Example:\n\nHere is a Cassandra example:\n\n    var thrift = require('thrift'),\n        Cassandra = require('./gen-nodejs/Cassandra')\n        ttypes = require('./gen-nodejs/cassandra_types');\n\n    var connection = thrift.createConnection(\"localhost\", 9160),\n        client = thrift.createClient(Cassandra, connection);\n\n    connection.on('error', function(err) {\n      console.error(err);\n    });\n\n    client.get_slice(\"Keyspace\", \"key\", new ttypes.ColumnParent({column_family: \"ExampleCF\"}), new ttypes.SlicePredicate({slice_range: new ttypes.SliceRange({start: '', finish: ''})}), ttypes.ConsistencyLevel.ONE, function(err, data) {\n      if (err) {\n        // handle err\n      } else {\n        // data == [ttypes.ColumnOrSuperColumn, ...]\n      }\n      connection.end();\n    });\n\n<a name=\"int64\"></a>\n## Int64\n\nSince JavaScript represents all numbers as doubles, int64 values cannot be accurately represented naturally. To solve this, int64 values in responses will be wrapped with Thirft.Int64 objects. The Int64 implementation used is [broofa/node-int64](https://github.com/broofa/node-int64).\n\n## Libraries using node-thrift\n\n* [yukim/node_cassandra](https://github.com/yukim/node_cassandra)\n\n## Custom client and server example\n\nAn example based on the one shown on the Thrift front page is included in the [examples](https://github.com/wadey/node-thrift/tree/master/examples) folder.\n",
  "readmeFilename": "README.md",
  "_id": "thrift-dev@0.8.0-dev02",
  "dist": {
    "shasum": "fc2109de7ddaeb71dd0bbb8d25fd30f5ba969b06"
  },
  "_from": "thrift-dev@latest",
  "_resolved": "https://registry.npmjs.org/thrift-dev/-/thrift-dev-0.8.0-dev02.tgz"
}
